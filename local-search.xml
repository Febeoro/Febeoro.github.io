<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>图网络基础——P2.3-小世界网络</title>
    <link href="/2021/03/22/%E5%9B%BE%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94P2-3-%E5%B0%8F%E4%B8%96%E7%95%8C%E7%BD%91%E7%BB%9C/"/>
    <url>/2021/03/22/%E5%9B%BE%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94P2-3-%E5%B0%8F%E4%B8%96%E7%95%8C%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="小世界模型"><a href="#小世界模型" class="headerlink" title="小世界模型"></a>小世界模型</h3><h4 id="模型引入"><a href="#模型引入" class="headerlink" title="模型引入"></a>模型引入</h4><p>ER随机图中的聚类系数是一个很小的值，会随着节点数量的增加而持续减小。那么如何在确定最短路径的同时获得一个比较大的距离系数呢?</p><p>实际上，聚类系数反应的是边的局部特性，而ER图的聚类系数和真实网络的差距过大，我们举一个例子<br><img src="./media/16164143108969.jpg"><br>通过上面的例子可以发现，随机图计算出来的聚类系数和真实的聚类系数的数量级相差至少在 10^2 以上。</p><p>在网格网络中，我们实现了三角闭合和高聚类系数，但是平均路径长度较长。</p><p><img src="https://i.loli.net/2020/06/12/JxuzCX8o6iTkGAj.png" alt="grid_network.png"></p><p>在随机网络中，我们实现了较短的平均路径长度，但聚类系数较低。</p><p><img src="https://i.loli.net/2020/06/12/sBlgn1kASdRxeT7.png" alt="random_network"></p><p>基于以上两个图结构，似乎不能直观地得到一个具有较短的平均路径长度，同时也具有较高的聚类系数的图。但是，大多数现实世界网络具有如下表所示的属性，其中 $h$ 是平均最短路径长度，$c$ 是平均聚类系数为，了便于比较，随机图的平均度与实际网络相同。</p><table><thead><tr><th align="center">网络类型</th><th align="center"><strong>$h_{actual}$</strong></th><th align="center"><strong>$h_{random}$</strong></th><th align="center"><strong>$c_{actual}$</strong></th><th align="center"><strong>$c_{random}$</strong></th></tr></thead><tbody><tr><td align="center">电影演员</td><td align="center">3.65</td><td align="center">2.99</td><td align="center">0.79</td><td align="center">0.00027</td></tr><tr><td align="center">电力网络</td><td align="center">18.70</td><td align="center">12.40</td><td align="center">0.080</td><td align="center">0.005</td></tr><tr><td align="center">C.elegans</td><td align="center">2.65</td><td align="center">2.25</td><td align="center">0.28</td><td align="center">0.05</td></tr></tbody></table><p>同时满足以上标准的<strong>高聚类系数</strong>和<strong>小平均路径长度</strong>的网络（数学上定义为 $L\propto \log N$，其中 $L$ 是平均路径长度，$N$ 是网络中的节点的总数）称为小型世界网络。</p><h4 id="小世界模型-1"><a href="#小世界模型-1" class="headerlink" title="小世界模型"></a>小世界模型</h4><p>1998年，Duncan J. Watts和Steven Strogatz提出了一个模型，该模型用于构建具有高聚类和较短平均路径长度的网络。他们将此模型称为“小世界模型”。要创建这样的模型，我们采用以下步骤：</p><ol><li><p>低维度的规则格<br>在我们实际的情况中，我们可以将图中的环视为一个格。从低维度的常规环开始，通过将每个节点连接到右侧的 $k$ 个邻居和左侧的 $k$ 个邻居， 其中 $k\geq2$。<br><img src="./media/16164155897022.jpg"></p></li><li><p>重新连线，生成捷径<br>添加或者删除一些边，依次来将一些“捷径”以概率 $p$ 加入到距离较远的格部分。<br><img src="./media/16164154602809.jpg"></p></li></ol><p>然后，我们进行以下观察：</p><ul><li>在 $p=0$ 没有发生重新连接边的地方，这仍然是具有高簇集，大直径的网格网络。</li><li>对于 $0&lt;p&lt;1$ ，某些边缘已经进行了重新连线，但是大部分结构仍然保留。这意味着<strong>localoity</strong>和<strong>shortcuts</strong>。</li><li>对于 $p=1$，所有边缘都进行了随机重新连接，这是一个具有低聚类，低直径的ErdősRényi (ER)随机图。</li></ul><p><img src="./media/16164658314955.jpg" alt="clustering_path.png"></p><p>小世界模型通过重新连接概率 $p \in[0,1]$ 来参数化。观察聚类系数和平均路径长度如何随 $p$ 的变化——平均路径长度随着 $p$ 增加而下降得更快，而聚类系数仍然相对较高。重新布线引入了shortcuts，这使得在结构保持相对坚固（高度聚类）的情况下，平均路径长度也可以减小。</p><p>从社交网络的角度来看，这种现象是直观的。虽然我们的大多数朋友都是本地人，但我们在不同国家/地区也有一些远距离的友谊，这足以使人类社交网络的直径崩溃，从而解释了流行的“六度分离”概念。</p><p>Watts-Strogatz小世界模型的两个局限性在于其度的分布与现实网络的幂律分布不匹配，并且由于假定了网络的大小，因此无法对网络的增长进行建模。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li>通过小世界模型，只要确定合适的概率p，我们就可以获得一个比较小的图的直径，同时获得比较大的聚类系数。也就是在聚类系数和直径之间做出来一个平衡</li><li>更容易去捕捉局部特征</li><li>由于更高的聚类系数，所以更好的去模拟了真实的网络</li></ol><h3 id="克罗内克-Kroneker-图模型"><a href="#克罗内克-Kroneker-图模型" class="headerlink" title="克罗内克(Kroneker) 图模型"></a>克罗内克(Kroneker) 图模型</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p>图生成的模型已被广泛研究。这些模型使我们能够在收集实际图困难时生成用于仿真和假设检验的图，并且还使我们可以检查生成模型应遵循的某些现实属性。</p><p>在制定图生成模型时，有两个重要的考虑因素。首先是生成现实网络的能力，其次是模型的数学易处理性，这允许对网络属性进行严格的分析。</p><p>Kronecker图模型是一个递归图生成模型，结合了数学易处理性和实际的静态和时态网络属性。Kronecker图模型的直观感受是自相似性，整体具有一个或多个部分的形状相同。<br><img src="./media/16164159318930.jpg"></p><h4 id="Kronecker积"><a href="#Kronecker积" class="headerlink" title="Kronecker积"></a>Kronecker积</h4><p>Kronecker积是一种非标准的矩阵运算，是一种生成自相似矩阵的方法。</p><p>Kronecker积使用 $\otimes$ 来表示。对于两个任意矩阵 $A \in \mathbb{R}^{m \times n}$ 和 $B \in \mathbb{R}^{p \times q}$， $A\otimes B \in \mathbb{R}^{mp \times nq}$，即：<br>$$<br>\textbf{A} \otimes \textbf{B} = \begin{bmatrix}a_{11}\textbf{B} &amp; \dots &amp; a_{1n}\textbf{B} \<br>\vdots &amp;\ddots &amp; \vdots \<br>a_{m1}\textbf{B} &amp; \dots &amp; a_{mn}\textbf{B} \<br>\end{bmatrix}<br>$$<br>例如，<br>$$<br>\begin{bmatrix} 1&amp;2\3&amp;4 \end{bmatrix} \otimes \begin{bmatrix} 0&amp;5\6&amp;7 \end{bmatrix}<br>= \begin{bmatrix} 1  \begin{bmatrix} 0&amp;5\6&amp;7 \end{bmatrix}  &amp;2  \begin{bmatrix} 0&amp;5\6&amp;7 \end{bmatrix}  \3  \begin{bmatrix} 0&amp;5\6&amp;7 \end{bmatrix}  &amp;4  \begin{bmatrix} 0&amp;5\6&amp;7 \end{bmatrix}  \end{bmatrix}<br>= \begin{bmatrix}<br>1 \times 0 &amp; 1 \times 5 &amp; 2 \times 0 &amp;  2 \times 5\<br>1 \times 6 &amp; 1 \times 7 &amp; 2 \times 6 &amp;  2 \times 7\<br>3 \times 0 &amp; 3 \times 5 &amp; 4 \times 0 &amp;  4 \times 5\<br>3 \times 6 &amp; 3 \times 7 &amp; 4 \times 6 &amp;  4 \times 7<br>\end{bmatrix}<br>= \begin{bmatrix}<br>0 &amp; 5 &amp; 0 &amp;  10\<br>6 &amp; 7 &amp; 12 &amp;  14\<br>0 &amp; 15 &amp; 0 &amp;  20\<br>18 &amp; 21 &amp; 24 &amp;  28<br>\end{bmatrix}<br>$$<br>为了在图生成中使用Kronecker积，我们将两个图的Kronecker积定义为两个图的邻接矩阵的Kronecker积。<br>从初始矩阵$K_{1}$(图的邻接矩阵)开始，我们迭代Kronecker积以生成更大的图 $K_{2}=K_{1}\otimes K_{1},K_{3}=K_{2}\otimes K_{1} \dots$，$m$ 阶的Kronecker图定义为<br>$$<br>K_{1}^{[m]}=\dots K_{m}=\underbrace{K_1 \otimes K_1 \otimes \dots K_1}<em>{\text{m times}}=K</em>{m-1} \otimes K_1<br>$$<br><img src="./media/16164160033041.jpg" alt="small_kronecker"></p><p>直观地，可以将Kronecker幂构造想象为图中的社区的递归增长，其中社区中的节点递归地扩展为社区的微型副本。Kronecker初始矩阵 $K_1$ 的选择可以改变，这会迭代影响较大图形的结构。<br><img src="./media/16164159880936.jpg" alt="initiator"></p><h4 id="随机的Kronecker图"><a href="#随机的Kronecker图" class="headerlink" title="随机的Kronecker图"></a>随机的Kronecker图</h4><p>到目前为止，我们仅考虑了具有二进制值 ${0,1}$的初始矩阵 $K_1$。但是，从此类初始矩阵生成的图在度数分布和其他属性中具有“阶梯”效应：由于 $K_1$ 的离散性质，个别值非常频繁地出现。</p><p>为了消除这种影响，通过放宽初<strong>始矩阵中的条目只能采用二进制值</strong>这个假设来引入随机性。取而代之的是可以采用 $[0,1]$ 范围上的值的矩阵 $\Theta_1$，并且每个值都代表该特定边出现的概率。这样矩阵（以及所有生成的较大矩阵乘积）表示该矩阵在所有可能图上的概率分布。</p><p>更具体地说，对于概率矩阵 $\Theta_1$，我们计算 $k^{th}$ Kronecker幂 $\Theta_k$ 作为大型随机邻接矩阵。每个 $\Theta_k$ 中的值 $p_{uv}$ 则代表边 $(u,v)$ 出现的概率。（请注意，概率总和不必为1，因为每个边缘出现的概率与其他边缘无关）</p><p><img src="https://i.loli.net/2020/06/12/JoiyXHvrLMYltae.png" alt="stochastic_graphs"></p><p>为了获得图的一个实例，通过以随机邻接矩阵中相应条目给出的概率对每个边进行采样，然后从该分布中进行采样。采样可以被认为是抛具有偏差的硬币的结果，其中偏差被矩阵中的每个条目参数化。</p><p>但是，这意味着简单的生成实例的时间是图形大小的平方，即 $O(N^2)$；当具有100万个节点，我们抛100万$\times$100万次硬币。</p><h4 id="Kronecker-随机图的生成过程"><a href="#Kronecker-随机图的生成过程" class="headerlink" title="Kronecker 随机图的生成过程"></a>Kronecker 随机图的生成过程</h4><p>存在一种快速启发式生成图形的过程，该过程所需时间随着边数量线性变化。</p><p>总体思路可以描述如下：对于每个边缘，我们以概率 $p_{uv} \in \Theta_1$递归地选择大随机矩阵的子区域，直到我们下降到大随机矩阵的单个单元为止。我们将边缘放置在那里。对于Kronecker图的 $k^{th}$ 幂 $\Theta_k$，将需要 $k$ 次下降步骤。</p><p>例如，考虑 $\Theta_1$ 是一个 $2 \times 2$ 的矩阵<br>$$<br>\Theta =\begin{bmatrix}<br>a &amp; b \<br>c &amp; d \end{bmatrix}<br>$$<br>对于具有 $n=2^k$ 个节点的图 $G$</p><ul><li><p>创建归一化矩阵 $L_{uv}=\frac{p_{uv}}{\sum_{u,v}p_{uv}},\quad p_{uv} \in \Theta_1$</p></li><li><p>对于每个边缘：</p><ul><li>For $i=1 \dots k:$<ul><li>初始 $x=0,y=0$</li><li>以概率 $L_{uv}$ 选择行和列</li><li>下降到 $G$ 的第 $i$ 级象限$(u,v)$<ul><li>$x=x+u \cdot 2^{k-1}$</li><li>$y=y+v \cdot 2^{k-1}$</li></ul></li><li>将边 $(x,y)$ 添加到 $G$</li></ul></li></ul></li></ul><p>如果 $k=3$，且对于每一步 $i$，选择象限 $b_{(0,1)},c_{(0,1)},d_{(0,1)}$ 分别基于 $L$ 的归一化概率，有<br>$$<br>x=0\cdot 2^{3-1}+1\cdot 2^{3-2}+1\cdot 2^{3-3}=0\cdot 2^2+1\cdot 2^1+1\cdot2^{0}=3\<br>y=1\cdot 2^{3-1}+0\cdot 2^{3-2}+1\cdot 2^{3-3}=1\cdot 2^2+0\cdot 2^1+1\cdot2^{0}=5<br>$$<br>因此，我们将边$(3,5)$添加到图中。</p><p>在实践中，随机Kronecker图模型能够生成与现实网络的属性非常匹配的图。要阅读有关Kronecker图模型的更多信息，请参阅 *J Leskovec et al., Kronecker Graphs: An Approach to Modeling Networks (2010)*。</p>]]></content>
    
    
    <categories>
      
      <category>日常笔记</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常笔记</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图网络基础——P2.1-网络属性</title>
    <link href="/2021/03/22/%E5%9B%BE%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94P2.1-%E7%BD%91%E7%BB%9C%E5%B1%9E%E6%80%A7/"/>
    <url>/2021/03/22/%E5%9B%BE%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94P2.1-%E7%BD%91%E7%BB%9C%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="网络属性"><a href="#网络属性" class="headerlink" title="网络属性"></a>网络属性</h3><p>在本节中，我们将研究关键网络属性以表征图形：<strong>聚类系数</strong>，<strong>节点距离</strong>，<strong>度分布</strong>，<strong>联通子图</strong>和<strong>稳定性</strong>。 这些定义主要是针对无向图的，但可以将其扩展为有向图。</p><h4 id="聚类系数（Cluster-Coefficient）"><a href="#聚类系数（Cluster-Coefficient）" class="headerlink" title="聚类系数（Cluster Coefficient）"></a>聚类系数（Cluster Coefficient）</h4><p>聚类系数(针对无向图)用于衡量节点 $i$ 的邻居所占比例。 </p><h5 id="Local-Cluster-Coefficient"><a href="#Local-Cluster-Coefficient" class="headerlink" title="Local Cluster Coefficient"></a>Local Cluster Coefficient</h5><p>一个节点的聚类参数被称为 Local Cluster Coefficient。它的计算方法也是非常的简单粗暴。先计算所有与当前节点连接的节点中间可能构成的 link 有多少个，这个数会作为分母，然后计算实际上有多少个节点被连接上了，这个数会作为分子。最终的计算结果就是 Local Cluster Coefficient。对于度数为 $k_{i}$的节点 $i$，我们计算聚类系数为<br>$$<br>C_{i}=\frac{2e_{i}}{k_{i}(k_{i}-1)}<br>$$<br>其中 $e_{i}$ 是节点 $i$ 的相邻节点之间的边数。 注意 $C_{i}\in[0,1]$ 。 此外，对于度数为0或1的节点，聚类系数是不确定的。</p><h5 id="Global-Cluster-Coefficient"><a href="#Global-Cluster-Coefficient" class="headerlink" title="Global Cluster Coefficient"></a>Global Cluster Coefficient</h5><p>知道了如何计算单个节点的聚类系数，现在来看如何计算整个图的 Cluster Coefficient。</p><p>一种最简单粗暴的方法是，先计算每一个节点的 Local Cluster Coefficient，然后取平均值。</p><p>第二种方法，是先计算在图中已经关闭上的三角形的个数，除上没有闭上的三角形的个数。这种计算方法叫做 Transitivity。这两种方法并没有优劣之分，只是 Transitivity 会倾向于给 degree 大的节点较大的权重。<br><img src="media/16164025874161.jpg" alt="Transitivity实例"></p><h5 id="平均聚类系数"><a href="#平均聚类系数" class="headerlink" title="平均聚类系数"></a>平均聚类系数</h5><p>同样，可以计算平均聚类系数为：<br>$$<br>C=\frac{1}{N}\sum_{i}^{N}C_{i}<br>$$<br>平均聚类系数使我们能够看到边在网络的某些部分是否显得更加密集。 在社交网络中，平均聚类系数趋于很高，表明如我们期望的那样，朋友的朋友倾向于彼此认识。</p><h4 id="节点距离"><a href="#节点距离" class="headerlink" title="节点距离"></a>节点距离</h4><p>路径是一系列节点，其中每个节点都链接到下一个节点：<br>$$<br>P_{n}=\left{i_{0},i_{1},i_{2},…,i_{n}\right}<br>$$<br>其中 $\left{(i_{0},i_{1}),(i_{1},i_{2}),(i_{2},i_{3}),…(i_{n-1},i_{n})\right} \in E$</p><p>一对节点之间的距离(最短路径，geodesic)定义为沿着连接这些节点的最短路径的边数。 如果两个节点未连接，则距离通常定义为无限(或零)。 还可以将距离视为遍历从一个节点到另一个节点所需的最少节点数。为了获得最短距离，通常可以采用图的深度优先遍历，或者广度优先遍历。对于一个较大的网络，想要获得从一个节点到所有节点的距离，会推荐使用 广度优先遍历，因为广度优先遍历可以一层一层的进行计算距离。</p><p>在有向图中，路径需要遵循箭头的方向。 因此，有向图的距离不是对称的。 对于具有加权边的图，距离是从一个节点到另一个节点所需要遍历的最小边权重。</p><p>图的平均路径长度是所有连接的节点之间中最短路径的平均值。 我们将计算平均路径长度定义为<br>$$<br>\hat{h}=\frac{1}{2 E_{max }} \sum_{i, j \neq i} h_{i j}<br>$$<br>其中 $E_{max}$ 是边或节点对的最大数目；也就是说 $E_{max}=n(n-1)/2$ 和 $h_{ij}$ 是从 $i$ 节点到 $j$ 节点的距离。注意，我们仅计算连接的节点对上的平均路径长度，因此忽略了无限长度的路径。</p><p>下面是是几个用于描述网络节点距离的参数</p><ul><li>Average distance： 这个很好理解，就是所有两两节点之间的最短距离的平均值，最直接的描述了图的紧密程度</li><li>Eccentricity：这个参数描述的是从任意一个节点，到达其他节点的最大距离</li><li>Diameter：图中的最大两个节点间的距离</li><li>Radius：图中的最小两个节点间的距离</li><li>Periphery： 和 Diameter 对应，那些最大节点距离等于 diameter 的节点</li><li>Center： 和 Radius 对应，那些最大节点距离等于 radius 的节点</li></ul><h4 id="度分布"><a href="#度分布" class="headerlink" title="度分布"></a>度分布</h4><p>度分布 $P(k)$ 表示随机选择的节点具有度 $k$ 的概率。 图 $G$ 的度分布可以通过归一化的直方图来概括，其中我们通过节点总数来归一化直方图。<br><img src="media/16164042642044.jpg" alt="度分布示意图"></p><p>我们可以通过 $P(k)=N_{k}/N$ 计算图的度分布。其中，$N_{k}$ 是度为 $k$ 的节点数，$N$ 为节点总数。可以将度分布视为随机选择的节点具有度 $k$ 的概率。</p><p>如果要将这些定义扩展为有向图，需要分别计算入度和出度的分布。</p><h4 id="联通子图"><a href="#联通子图" class="headerlink" title="联通子图"></a>联通子图</h4><p>满足子联通图的充分必要条件有两个：</p><ul><li>子连通图中的每个节点都可以有路径可以连接到其他节点</li><li>任何其他非连通图单位的节点都没有路径可以连接到该连通图</li></ul><p>图的连通性可衡量最大连通组件的大小。 最大的连通组件是可以通过路径将任意两个顶点连接在一起的图的最大的集合。</p><p>查找连接的组件：</p><ol><li>从随机节点开始并执行广度优先搜索(BFS)</li><li>标记BFS访问的节点</li><li>如果访问了所有节点，则表明网络是连通的</li><li>否则，找到一个未访问的节点并重复BFS</li></ol><p>这里着重介绍一下在有向图中的两种判断是否为联通图的方式：</p><ol><li>强联通图：每个节点 u 可以到 v，v 也可以到 u。</li><li>弱联通图：只需要 u 可以到 v 即可，可以想象成，满足的条件就是将有向图变成无向图之后是强链接的即可。<h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4>图的稳定性表现在，如果我移除任意节点，或者移除任意边，这个图的连接性是否仍然可以保证连通性。</li></ol><p>图的稳定性分析在一些场景中非常有用，举个栗子，比如我们有一个航班图，我们需要分析如果某一个机场意外关闭，或者某一个航班意外取消，这会不会影响出行。 所以图的稳定性分析实际上描述的是一个图抵抗攻击的能力。同样的应用场景还有，电力网络，互联网攻击等。</p><p>那么如何定量的描述一个网络的稳定性呢，两个指标：</p><ol><li>断开一个网络需要的最少的 Node Cuts</li><li>断开一个网络需要的最少的 Edge Cuts</li></ol><p><img src="media/16164037125574.jpg"><br>如上图所示，如果我们移除网络中的 A 节点，这个网络就会断开。</p><p>除了断开一个网络，有的时候我们也需要分析 A 节点到 B 节点之间的连接的稳定性，分析链接的稳定的指标也非常类似以上：</p><ol><li>断开两个节点的链接需要的最少的 Node Cuts</li><li>断开两个节点的链接需要的最少的 Edge Cuts<br><img src="media/16164037337473.jpg"><br>如上图所示，如果我们移除网络中的 A$\rightarrow$N 和 J$\rightarrow$O 连接，G$\rightarrow$L 的连接将会断开。</li></ol>]]></content>
    
    
    <categories>
      
      <category>日常笔记</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常笔记</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图网络基础——P1-Introduction and Graph Structure</title>
    <link href="/2021/03/22/%E5%9B%BE%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94P1-Introduction%20and%20Graph%20Structure/"/>
    <url>/2021/03/22/%E5%9B%BE%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94P1-Introduction%20and%20Graph%20Structure/</url>
    
    <content type="html"><![CDATA[<h3 id="图的基本介绍和图结构"><a href="#图的基本介绍和图结构" class="headerlink" title="图的基本介绍和图结构"></a>图的基本介绍和图结构</h3><p>网络成为了用于描述复杂系统中交互实体的通用语言。从图片上讲，与其认为我们的数据集由一组孤立的数据点组成，不如考虑这些点之间的相互作用和关系。</p><p>在不同种类的网络之间进行哲学上的区分是有启发性的。对网络的一种解释是作为现实生活中出现的现象的例子。我们称这些网络为<em>自然图</em>。像如下例子：</p><ul><li>人类社交网络(70+亿个人的集合)</li><li>互联网通信系统(电子设备的集合)</li></ul><p>网络的另一种解释是作为一种数据结构，可用于解决特定的预测问题。在这种情况下，我们对实体之间的关系更感兴趣，因此我们可以有效地执行学习任务。我们称这些网络为<em>信息图</em>，比如：</p><ul><li>场景图(场景中的对象如何相互关联)</li><li>相似性网络(其中连接了数据集中的相似点)</li></ul><p>在本部分内容，我们将主要介绍一些图的基础知识，希望能够通过图的显式建模关系以获得更好的预测性能。此类预测性任务的一些示例包括：</p><ol><li><em>节点分类</em>，我们在其中预测给定节点的类型/颜色</li><li><em>链接预测</em>，我们在其中预测两个节点是否链接</li><li><em>社区检测</em>，我们在其中识别密集链接的节点簇</li><li><em>相似度计算</em>，我们在其中测量两个节点或网络的相似度</li></ol><p>总而言之，<strong>网络是一种用于描述复杂数据的通用语言</strong>，并且可以应用于各种不同的领域。随着数据可用性的提高和各种计算挑战，学习了解网络可以使人们有能力做出各种各样的贡献。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>网络/图形（从技术上讲，网络通常是指真实的系统(网络，社交网络等)，而图形通常是指网络的数学表示形式(网络图，社会图等)。 在这些笔记中，我们将互换使用这些术语。）被定义为对象的集合，其中一些对象对通过链接连接。我们将对象(节点)的集合定义为 $N$， 对象之间的交互(边/链接)定义为 $E$， 将图形定义为 $G(N,E)$。</p><p><strong>无向图</strong>具有对称/双向链接(例如，Facebook上的朋友关系)。我们定义节点度 $k_{i}$ 为无向图中与节点 $i$ 相邻的边数。那么平均程度是<br>$$<br>\bar{k}=\langle k\rangle=\frac{1}{|N|} \sum_{i=1}^{|N|} k_{i}=\frac{2|E|}{N}<br>$$<br><strong>有向图</strong>具有定向链接(例如，在Twitter上关注)。我们定义入度 $k_{i}^{in}$ 为进入节点 $i$ 的边数。同样，我们定义出度 $k_{i}^{out}$ 为离开节点 $i$ 的边数。<br>$$<br>\bar{k}=\langle k\rangle=\frac{|E|}{N}<br>$$<br><strong>完全图</strong>，具有最大数量的边的无向图称为完全图(这样所有节点对都被连接)。完全图有 $|E|=\left(\begin{array}{l}N\2\end{array}\right)=\frac{N(N-1)}{2}$ 条边，并且平均度为 $|N|-1$ 。</p><p><strong>二分图</strong>，二分图是其节点可以分为两个不相交的集和 $U$ 和 $V$，使得每个边都连接一个集合 $U$ 的节点和一个集合 $V$ 的节点（也就是说，集合 $U$ 内的节点没有边，集合 $V$ 内的节点没有边，我们称 $U$和 $V$  为独立的集合）。如果独立集合 $U$ 和 $V$ 共享至少一个共同的邻居，我们可以通过在独立集合中创建边来“折叠”二分图。<br>在这里，如果集合 $U$ 中的节点至少共享一个在 集合 $V$ 中的邻居节点，则集合 $U$  中的节点将相连形成投影 $U$，采用相同的过程来获得投影 $V$。<br><img src="./media/16164606916214.jpg"></p><h4 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h4><p>我们使用<strong>邻接矩阵</strong> $A$ 来表示图 $G$， 其中 $A_{ij}=1$ 表示节点 $i$ 和 $j$ 相连(如果 $A_{ij}=0$ 则表示没有相邻边)。对于有向图则 $A$ 是不对称的。例如，一个4节点的有向图的邻接矩阵可以表示为<br>$$<br>A=\left[\begin{array}{llll}0 &amp; 1 &amp; 0 &amp; 1 \ 1 &amp; 0 &amp; 0 &amp; 1 \ 0 &amp; 0 &amp; 0 &amp; 1 \ 1 &amp; 1 &amp; 1 &amp; 0\end{array}\right]<br>$$<br>对于无向图，<br>$$<br>k_{i}=\sum_{j=1}^{|N|} A_{i j} \quad \text { and } \quad k_{j}=\sum_{i=1}^{|N|} A_{i j}<br>$$<br>同样，对于有向图，<br>$$<br>k_{i}^{out}=\sum_{j=1}^{|N|} A_{i j} \quad \text { and } \quad k_{j}^{in}=\sum_{i=1}^{|N|} A_{i j}<br>$$<br>但是，大多数现实世界的网络都很稀疏( $|E| \ll E_{max}$ ,or $\bar{k} \ll |N|-1$ )，结果导致邻接矩阵被大量的零填充。</p><p>为了缓解此问题，我们可以将图表示为一组边的集合，从而节省了内存，但是这样使得边的查找困难。</p><h4 id="图的连通"><a href="#图的连通" class="headerlink" title="图的连通"></a>图的连通</h4><p>如果无向图 $G$ 图中任意一对节点之间存在路径，则我们称 $G$ 为<strong>强连通图</strong>。<strong>非强连通图</strong>由两个或多个连接的组件组成。如果移除某一条边将强连通图变为非强连通图，我们称这条边为<strong>桥边</strong>；<strong>关键节点</strong>是指移除改节点后导致强连通图变为非强连通图的节点。具有多个组成部分的网络邻接矩阵可以按块对角线的形式编写(这样，非零元素将被限制为正方形，而所有其他元素均为0)。</p><p>我们可以将这些概念进一步扩展到有向图，将强连接的有向图定义为一个有从某个节点到任何其他节点的路径的图，反之亦然，(即同时具有A→B和B→A的路径)。如果忽略边的方向，则将形成一个弱连接的有向图。我们进一步将<strong>强连接组件(SCCs)<strong>定义为 $G$ 的</strong>强连接子图</strong>。可以到达SCC的节点是其内部组件的一部分，可以从SCC到达的节点是其外部组件的一部分。</p><p>下图虽然已连接但不是强连接图，包含了一个SCC(图 $G’=G[A,B,C]$ )。</p><p><img src="./media/16164606555734.jpg" alt="introduction_directed_graph"></p>]]></content>
    
    
    <categories>
      
      <category>日常笔记</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常笔记</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
